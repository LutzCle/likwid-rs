/* automatically generated by rust-bindgen 0.59.1 */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]

extern crate libloading;
pub struct liblikwid {
    __library: ::libloading::Library,
    pub likwid_markerInit: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub likwid_markerThreadInit: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub likwid_markerNextGroup: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub likwid_markerClose: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub likwid_markerRegisterRegion: Result<
        unsafe extern "C" fn(regionTag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub likwid_markerStartRegion: Result<
        unsafe extern "C" fn(regionTag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub likwid_markerStopRegion: Result<
        unsafe extern "C" fn(regionTag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub likwid_markerResetRegion: Result<
        unsafe extern "C" fn(regionTag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub likwid_markerGetRegion: Result<
        unsafe extern "C" fn(
            regionTag: *const ::std::os::raw::c_char,
            nr_events: *mut ::std::os::raw::c_int,
            events: *mut f64,
            time: *mut f64,
            count: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
}
impl liblikwid {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let likwid_markerInit = __library.get(b"likwid_markerInit\0").map(|sym| *sym);
        let likwid_markerThreadInit = __library.get(b"likwid_markerThreadInit\0").map(|sym| *sym);
        let likwid_markerNextGroup = __library.get(b"likwid_markerNextGroup\0").map(|sym| *sym);
        let likwid_markerClose = __library.get(b"likwid_markerClose\0").map(|sym| *sym);
        let likwid_markerRegisterRegion = __library
            .get(b"likwid_markerRegisterRegion\0")
            .map(|sym| *sym);
        let likwid_markerStartRegion = __library.get(b"likwid_markerStartRegion\0").map(|sym| *sym);
        let likwid_markerStopRegion = __library.get(b"likwid_markerStopRegion\0").map(|sym| *sym);
        let likwid_markerResetRegion = __library.get(b"likwid_markerResetRegion\0").map(|sym| *sym);
        let likwid_markerGetRegion = __library.get(b"likwid_markerGetRegion\0").map(|sym| *sym);
        Ok(liblikwid {
            __library,
            likwid_markerInit,
            likwid_markerThreadInit,
            likwid_markerNextGroup,
            likwid_markerClose,
            likwid_markerRegisterRegion,
            likwid_markerStartRegion,
            likwid_markerStopRegion,
            likwid_markerResetRegion,
            likwid_markerGetRegion,
        })
    }
    pub unsafe fn likwid_markerInit(&self) -> () {
        (self
            .likwid_markerInit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn likwid_markerThreadInit(&self) -> () {
        (self
            .likwid_markerThreadInit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn likwid_markerNextGroup(&self) -> () {
        (self
            .likwid_markerNextGroup
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn likwid_markerClose(&self) -> () {
        (self
            .likwid_markerClose
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn likwid_markerRegisterRegion(
        &self,
        regionTag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .likwid_markerRegisterRegion
            .as_ref()
            .expect("Expected function, got error."))(regionTag)
    }
    pub unsafe fn likwid_markerStartRegion(
        &self,
        regionTag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .likwid_markerStartRegion
            .as_ref()
            .expect("Expected function, got error."))(regionTag)
    }
    pub unsafe fn likwid_markerStopRegion(
        &self,
        regionTag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .likwid_markerStopRegion
            .as_ref()
            .expect("Expected function, got error."))(regionTag)
    }
    pub unsafe fn likwid_markerResetRegion(
        &self,
        regionTag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .likwid_markerResetRegion
            .as_ref()
            .expect("Expected function, got error."))(regionTag)
    }
    pub unsafe fn likwid_markerGetRegion(
        &self,
        regionTag: *const ::std::os::raw::c_char,
        nr_events: *mut ::std::os::raw::c_int,
        events: *mut f64,
        time: *mut f64,
        count: *mut ::std::os::raw::c_int,
    ) -> () {
        (self
            .likwid_markerGetRegion
            .as_ref()
            .expect("Expected function, got error."))(
            regionTag, nr_events, events, time, count
        )
    }
}
